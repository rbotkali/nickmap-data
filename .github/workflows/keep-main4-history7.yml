name: Keep main=4 & history=7d (scheduled)

on:
  schedule:
    - cron: "*/10 * * * *"   # 10분마다 (원하면 */30, 0 * * * * 등으로 조정)
  workflow_dispatch: {}

concurrency:
  group: keep-4-history-7
  cancel-in-progress: true

jobs:
  archive_and_trim:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 1) history에 최신 main 스냅샷 저장(두 JSON만)
      - name: snapshot -> history
        run: |
          set -e
          NOW=$(date -u +'%Y-%m-%d_%H-%M-%S')

          # history 브랜치 없으면 생성
          if ! git ls-remote --exit-code --heads origin history >/dev/null 2>&1; then
            git checkout --orphan history
            git rm -r --cached . 2>/dev/null || true
            echo "# history branch (7-day rotating snapshots)" > README.md
            git add README.md
            git commit -m "init history"
            git push -u origin history
          fi

          # origin/main에서 안전하게 파일 추출
          git fetch origin main
          git checkout history
          mkdir -p "snapshots/${NOW}"

          for f in nickmap.json nickmap_full.json; do
            if git cat-file -e origin/main:$f 2>/dev/null; then
              git show origin/main:$f > "snapshots/${NOW}/$f"
            fi
          done

          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "snapshot ${NOW} [skip ci]"
            git push origin history
          fi

          git checkout main

      # 2) 7일 이전 스냅샷 삭제(폴더명 파싱; 날짜 기준)
      - name: prune history (>7d)
        run: |
          set -e
          git checkout history
          if [ -d snapshots ]; then
            NOWS=$(date -u +%s)
            for d in snapshots/*; do
              [ -d "$d" ] || continue
              base=$(basename "$d")  # YYYY-MM-DD_HH-MM-SS
              yyyy=${base:0:4}; mm=${base:5:2}; dd=${base:8:2}
              HH=${base:11:2}; MM=${base:14:2}; SS=${base:17:2}
              if SNAP=$(date -u -d "${yyyy}-${mm}-${dd} ${HH}:${MM}:${SS}Z" +%s 2>/dev/null); then
                age_days=$(( (NOWS - SNAP) / 86400 ))
                if [ "$age_days" -gt 7 ]; then
                  echo "delete $d (age ${age_days}d)"
                  rm -rf "$d"
                fi
              fi
            done
            if ! git diff --quiet; then
              git add -A
              git commit -m "prune snapshots (>7d) [skip ci]"
              git push origin history
            fi
          fi
          git checkout main

      # 3) main 최근 4커밋 유지
      - name: keep main last 4 commits
        run: |
          set -e
          git fetch origin +refs/heads/main:refs/remotes/origin/main
          git reset --hard origin/main

          COUNT=$(git rev-list --count HEAD)
          N=4
          if [ "$COUNT" -le "$N" ]; then
            echo "No trim needed"; exit 0
          fi

          mapfile -t LASTN < <(git rev-list --max-count="$N" HEAD | tac)

          git checkout --orphan temp
          git rm -r --cached . 2>/dev/null || true

          for sha in "${LASTN[@]}"; do
            git rm -rf . 2>/dev/null || true
            git checkout -f "$sha" -- .
            COMMIT_MSG="$(git show -s --format=%s "$sha")"
            A_NAME="$(git show -s --format=%an "$sha")"; A_EMAIL="$(git show -s --format=%ae "$sha")"; A_DATE="$(git show -s --format=%aI "$sha")"
            C_NAME="$(git show -s --format=%cn "$sha")"; C_EMAIL="$(git show -s --format=%ce "$sha")"; C_DATE="$(git show -s --format=%cI "$sha")"
            GIT_AUTHOR_NAME="$A_NAME" GIT_AUTHOR_EMAIL="$A_EMAIL" GIT_AUTHOR_DATE="$A_DATE" \
            GIT_COMMITTER_NAME="$C_NAME" GIT_COMMITTER_EMAIL="$C_EMAIL" GIT_COMMITTER_DATE="$C_DATE" \
              git commit -m "$COMMIT_MSG [skip ci]" || true
          done

          git branch -D main || true
          git branch -m main
          git push -f origin main
